import { useState, useEffect } from 'react';
import PlaylistForm from './PlaylistForm';
import PlaylistDisplay from './PlaylistDisplay';
import { generatePlaylist, createSpotifyPlaylist, fetchSpotifyUser, addTracksToSpotifyPlaylist } from '../services/api'; // Import the function to add tracks
import './PlaylistGenerator.css';

// eslint-disable-next-line react/prop-types
function PlaylistGenerator({ username }) {
    const [playlist, setPlaylist] = useState([]);
    const [prompt, setPrompt] = useState('');
    const [loading, setLoading] = useState(false);
    const [spotifyPlaylistCreated, setSpotifyPlaylistCreated] = useState(false);
    const [userId, setUserId] = useState(null); // Add userId state
    // const [createdPlaylistId, setCreatedPlaylistId] = useState(null); // Store the created Spotify playlist ID
    const [profileUrl, setProfileUrl] = useState(null); // Add profile URL state

    useEffect(() => {
        const accessToken = sessionStorage.getItem('spotify_access_token');
        if (accessToken) {
            // Fetch user info on component mount to get userId
            fetchSpotifyUser(accessToken).then(userData => {
                setUserId(userData.id); // Set Spotify userId
                setProfileUrl(userData.external_urls.spotify); // Store profile URL
            }).catch(err => {
                console.error("Failed to fetch user data", err);
            });
        }
    }, []); // Only run on initial mount

    const handleGeneratePlaylist = async (prompt) => {
        setLoading(true);
        setSpotifyPlaylistCreated(false);
        try {
            const generatedPlaylist = await generatePlaylist(prompt);
            setPlaylist(generatedPlaylist);
            setPrompt(prompt);
        } catch (error) {
            console.error("Failed to generate playlist:", error);
        } finally {
            setLoading(false);
        }
    };

    const handleCreateSpotifyPlaylist = async () => {
        try {
            const accessToken = sessionStorage.getItem('spotify_access_token');
            
            // Create the Spotify playlist
            const spotifyPlaylist = await createSpotifyPlaylist({
                name: `${prompt}`,
                description: `Generated by Harmonix for: ${prompt}`,
                accessToken: accessToken,
                userId: userId // Pass the userId
            });
            console.log('Spotify Playlist Created:', spotifyPlaylist);
            
            // Save the playlist ID in state (for future use if needed)
            setSpotifyPlaylistCreated(true);
            // setCreatedPlaylistId(spotifyPlaylist.id);
    
            // Directly use the playlist ID for adding tracks
            const playlistId = spotifyPlaylist.id;
    
            // After the playlist is created, add tracks to it
            await addTracksToSpotifyPlaylist(playlistId, playlist, accessToken);
            console.log('Tracks added to Spotify playlist');

            // Open the playlist in a new tab
            window.open(spotifyPlaylist.external_urls.spotify, '_blank');
        } catch (error) {
            console.error("Failed to create Spotify playlist or add tracks:", error);
        }
    };

    const handleSignOut = () => {
        sessionStorage.removeItem('spotify_access_token'); // Clear access token
        window.location.href = '/'; // Redirect to the landing page or login
    };
    
    return (
        <div className="generator">
            <div className="header-info">
                <h2>Welcome, {username}</h2>

                <div className="profile-links">

                    {/* Spotify profile link */}
                    {profileUrl && (
                        <p>
                            <a href={profileUrl} target="_blank" rel="noopener noreferrer">
                                View Your Spotify Profile
                            </a>
                        </p>
                    )}

                    {/* Sign-out button */}
                    <a onClick={handleSignOut}>Sign Out</a>
                </div>
            </div>

            <h1>Harmonix Playlist Generator</h1>
            <PlaylistForm onGenerate={handleGeneratePlaylist} />
            {loading ? (
                <div className="spinner"></div>
            ) : (
                <>
                    {playlist.length > 0 && (
                        <>
                            <PlaylistDisplay playlist={playlist} prompt={prompt} />
                            {!spotifyPlaylistCreated && (
                                <button onClick={handleCreateSpotifyPlaylist}>
                                    Add Playlist to Spotify
                                </button>
                            )}
                            {spotifyPlaylistCreated && (
                                <p>Playlist added to your Spotify account!</p>
                            )}
                        </>
                    )}
                </>
            )}
        </div>
    );
}

export default PlaylistGenerator;
